from datetime import datetime
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
import inspect

# Try to extract the active script
def get_caller_script():
    frame = inspect.stack()[2]
    return Path(frame.filename).name

# Format standard header (target-aware)
def make_provenance_header(target: Path | None = None):
    lines = [
        f"# Generated by: {get_caller_script()}",
        f"# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
    ]
    if target is not None:
        lines.append(f"# Target: {Path(target).name}")
    return lines

# ─── CSV OUTPUT ────────────────────────────────────────────────────────
def write_csv_with_provenance(df: pd.DataFrame, path: Path, **kwargs):
    path = Path(path)
    header_lines = make_provenance_header(path)
    path.parent.mkdir(parents=True, exist_ok=True)

    # Write header first
    with open(path, "w") as f:
        for line in header_lines:
            f.write(line + "\n")
    # Then append the actual data
    df.to_csv(path, mode="a", index=False, **kwargs)

# ─── MARKDOWN OUTPUT ───────────────────────────────────────────────────
def write_markdown_with_provenance(lines: list[str], path: Path):
    path = Path(path)
    header_lines = make_provenance_header(path)
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w") as f:
        for line in header_lines:
            f.write(line + "\n")
        f.write("\n")
        for line in lines:
            f.write(line + "\n")

# ─── PLOT STAMP ────────────────────────────────────────────────────────
def stamp_plot_provenance(ax=None, hide=False):
    if hide:
        return
    if ax is None:
        ax = plt.gca()
    label = "\n".join(make_provenance_header())
    ax.text(
        0.01, 0.01,
        label,
        ha="left", va="bottom",
        fontsize=6,
        color="gray",
        transform=ax.transAxes
    )
